/*
 * Copyright (c) 2024, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
plugins {
    id 'jacoco'
}

apply plugin: 'java'

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - WSO2 Control Plane Tests'

def packageName = "wso2.controlplane"
def packageOrg = "ballerina"
def moduleName = "tests"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/BallerinaTest.toml")
def testCoverageParams = "--code-coverage --coverage-format=xml --includes=io.ballerina.wso2.controlplane.*:ballerina." +
        "wso2.controlplane*"
def testPackages = ["artifacts-tests"]

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

clean {
    testPackages.each { testPackage ->
        delete "${project.projectDir}/${testPackage}/target"
    }
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task updateTomlVersions {
    doLast {
        testPackages.each { testPackage ->
            def ballerinaTomlFile =  new File("${project.projectDir}/${testPackage}/Ballerina.toml")
            def newBallerinaToml = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
            newBallerinaToml = newBallerinaToml.replace("@toml.version@", tomlVersion)
            newBallerinaToml = newBallerinaToml.replace("@package.name@", testPackage.replaceAll("-", "_"))
            ballerinaTomlFile.text = newBallerinaToml
        }
    }
}

task commitTomlFiles {
    doLast {
        def files = " "
        testPackages.each{ testPackage ->
            files += "${testPackage}/Ballerina.toml ${testPackage}/Dependencies.toml "
        }

        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" ${files}"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' ${files}"
            }
        }
    }
}

def groupParams = ""
def disableGroups = ""
def windowsDisableGroups = "--disable-groups disabledOnWindows"
def debugParams = ""
def balJavaDebugParam = ""
def testParams = ""
def graalvmFlag = ""
def parallelTestFlag = ""
def skipTests = false
def ballerinaDockerTag = ""
def projectDirectory = new File("$project.projectDir")
def parentDirectory = new File("$projectDirectory.parent")

task initializeVariables {
    if (project.hasProperty("groups")) {
        groupParams = "--groups ${project.findProperty("groups")}"
    }
    if (project.hasProperty("disable")) {
        disableGroups = "--disable-groups ${project.findProperty("disable")}"
    }
    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }
    if (project.hasProperty("balJavaDebug")) {
        balJavaDebugParam = "BAL_JAVA_DEBUG=${project.findProperty("balJavaDebug")}"
    }
    if (project.hasProperty('balGraalVMTest')) {
        graalvmFlag = '--graalvm'
    }
    if (project.hasProperty('balParallelTest')) {
        parallelTestFlag = '--parallel'
    }
    if (project.hasProperty('balTests')) {
        testPackages = project.findProperty('balTests').toString().split(",")
    }
    if (project.hasProperty('skipBalTests')) {
        project.findProperty('skipBalTests').toString().split(",").each {testPackage ->
            testPackages.remove(testPackage)
        }
    }
    ballerinaDockerTag = getDockerImageTag(project)
    println("[Info] project builds on docker")
    println("[Info] using the Ballerina docker image tag: $ballerinaDockerTag")

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":${packageName}-ballerina-tests:test")) {
            if (!project.hasProperty('balGraalVMTest')) {
                testParams = "${testCoverageParams}"
            }
        } else {
            skipTests = true
        }
    }
}

static String getDockerImageTag(Project project) {
    def ballerinaDockerTag = project.findProperty('ballerinaLangVersion')
    if (project.hasProperty('buildUsingDocker')) {
        ballerinaDockerTag = project.findProperty('buildUsingDocker')
        if (ballerinaDockerTag == '') {
            return 'nightly'
        }
    }
    if (isTimeStampVersion(ballerinaDockerTag as String)) {
        return 'nightly'
    }
    return ballerinaDockerTag
}

static boolean isTimeStampVersion(String version) {
    return version.trim().split("-").length > 1
}

static void createDockerEnvFile(String dockerEnvFilePath) {
    def dockerEnvFileWriter = new PrintWriter("$dockerEnvFilePath", "UTF-8")
    def excludedVariables = ["PATH", "JAVA_HOME", "HOME"]
    def envVariables = System.getenv()
    envVariables.each { key, value ->
        if (!excludedVariables.contains(key) && !key.startsWith("=")) {
            dockerEnvFileWriter.println("$key=$value")
        }
    }
    dockerEnvFileWriter.close()
}

static void deleteFile(String filePath) {
    def file = new File(filePath)
    if (file.exists() && !file.delete()) {
        println("Failed to delete $filePath.")
    }
}

task ballerinaTest {
    inputs.dir file(project.projectDir)
    dependsOn(":${packageName}-${packageOrg}:build")
    dependsOn(updateTomlVersions)
    dependsOn(initializeVariables)
    dependsOn(":${packageName}-${packageOrg}-${moduleName}:compileJava")
    dependsOn(":${packageName}-${packageOrg}-${moduleName}:jar")
    dependsOn(":${packageName}-${packageOrg}-${moduleName}:processResources")
    dependsOn(compileTestJava)
    dependsOn(processTestResources)
    finalizedBy(commitTomlFiles)

    doLast {
        testPackages.each { testPackage ->
            if (!skipTests) {
                exec {
                    workingDir "${project.projectDir}/${testPackage}"
                    environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                    createDockerEnvFile("$project.projectDir/$testPackage/docker.env")
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        disableGroups = disableGroups + windowsDisableGroups
                    }
                    def balTestWithDocker = """
                            docker run --env-file $project.projectDir/$testPackage/docker.env --rm --net=host -u root \
                                -v $parentDirectory:/home/ballerina/$parentDirectory.name \
                                -v $projectDirectory/$testPackage:/home/ballerina/$parentDirectory.name/$projectDirectory.name/$testPackage \
                                ballerina/ballerina:$ballerinaDockerTag \
                                /bin/sh -c "cd $parentDirectory.name/$projectDirectory.name/$testPackage && \
                                $balJavaDebugParam bal test ${graalvmFlag} ${parallelTestFlag} ${testParams} ${groupParams} ${disableGroups} ${debugParams}"
                        """
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'cmd', '/c', "$balTestWithDocker && exit %%ERRORLEVEL%%"
                    } else {
                        commandLine 'sh', '-c', "$balTestWithDocker"
                    }
                }
                deleteFile("$project.projectDir/$testPackage/docker.env")
            }
        }
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}x-${packageName}")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

task deleteDependencyTomlFile {
    if (project.hasProperty("deleteDependencies")) {
        testPackages.each { testPackage ->
            delete "${project.projectDir}/${testPackage}/Dependencies.toml"
        }
    }
}

ballerinaTest.dependsOn deleteDependencyTomlFile
test.dependsOn ballerinaTest
build.dependsOn test
